package com.mmxlabs.scenario.service.ui.resource;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.impl.URIHandlerImpl;

import com.mmxlabs.scenario.service.IScenarioService;
import com.mmxlabs.scenario.service.ui.Activator;

public class ScenarioServiceURIHandler extends URIHandlerImpl {

	/**
	 * Reference to {@link Activator} maintained map of services.
	 */
	private Map<String, WeakReference<IScenarioService>> services;

	public ScenarioServiceURIHandler() {

		services = Activator.getDefault().getScenarioServices();
	}

	@Override
	public boolean canHandle(final URI uri) {
		// This handler should only accept URIs with the scheme "service"

		return "service".equalsIgnoreCase(uri.scheme());
	}

	@Override
	public OutputStream createOutputStream(final URI uri, final Map<?, ?> options) throws IOException {

		final String service = uri.host();

		if (services.containsKey(service)) {

			final IScenarioService s = services.get(service).get();

			if (s != null) {
				return s.createOutputStream(uri.path(), options);
			}
		}

		return null;
		// This function may be called with a URI path with or without an id. If an id is not specified
		// the EMF resource URI will be modified to include the id generated by MongoDB.

		// return new ScenarioServiceOutputStream(this, uri, options, getResponse(options));
	}

	@Override
	public InputStream createInputStream(final URI uri, final Map<?, ?> options) throws IOException {
		final String service = uri.host();

		if (services.containsKey(service)) {

			final IScenarioService s = services.get(service).get();

			if (s != null) {
				return s.createInputStream(uri.path(), options);
			}
		}

		return null;
	}

	@Override
	public void delete(final URI uri, final Map<?, ?> options) throws IOException {

		final String service = uri.host();

		if (services.containsKey(service)) {

			final IScenarioService s = services.get(service).get();

			if (s != null) {
				s.delete(uri.path(), options);
			}
		}
	}

	@Override
	public boolean exists(final URI uri, final Map<?, ?> options) {
		final String service = uri.host();

		if (services.containsKey(service)) {

			final IScenarioService s = services.get(service).get();

			if (s != null) {
				return s.exists(uri.path(), options);
			}
		}
		return false;
	}

}
