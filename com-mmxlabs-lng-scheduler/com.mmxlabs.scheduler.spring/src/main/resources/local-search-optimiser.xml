<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">


	<task:executor id="executor-1" />
	<task:scheduled-tasks>
		<task:scheduled ref="optRunner" method="optimise"
			fixed-delay="1" />
	</task:scheduled-tasks>

	<bean id="optRunner" class="com.mmxlabs.optimiser.core.impl.OptimiserRunner">

		<constructor-arg ref="optimisationContext" />
		<constructor-arg ref="optimiser" />
	</bean>

	<!--TODO: Process from properties file -->

	<bean id="constraintCheckerNames" factory-bean="constraintCheckerRegistry"
		factory-method="getConstraintCheckerNames" />

	<bean id="fitnessComponentNames" factory-bean="fitnessRegistry"
		factory-method="getFitnessComponentNames" />

	<bean id="thresholder"
		class="com.mmxlabs.optimiser.lso.impl.thresholders.MovingAverageThresholder">

		<!--return new MovingAverageThresholder(getRandom(), ts.getInitialAcceptanceRate(), 
			ts.getAlpha(), ts.getEpochLength(), 500); -->
		<!--// TODO Pull from properties -->
		<constructor-arg>
			<ref local="random" />
		</constructor-arg>
		<constructor-arg value="${thresholder.initialAcceptanceRate}" />
		<constructor-arg value="${thresholder.alpha}" />
		<constructor-arg value="${thresholder.epochLength}" />
		<constructor-arg value="500" />
	</bean>


	<!-- Prototype scope to create new instance for each request -->
	<bean id="random" class="java.util.Random" scope="prototype">
		<constructor-arg>
			<value>${seed}</value>
		</constructor-arg>
	</bean>

	<!-- Part2: Create an optimisation -->

	<bean id="manipulator"
		class="com.mmxlabs.scheduler.optimiser.manipulators.SequencesManipulatorUtil"
		factory-method="createDefaultSequenceManipulators">
		<constructor-arg ref="optimisationData" />
	</bean>

	<bean id="constrainedMoveGenerator"
		class="com.mmxlabs.scheduler.optimiser.lso.ConstrainedMoveGenerator"
		init-method="init" p:random-ref="random">
		<constructor-arg ref="optimisationContext" />
	</bean>

	<!--Map this move generator to the moveGenerator bean name -->
	<alias name="constrainedMoveGenerator" alias="moveGenerator" />

	<bean id="randomMoveGenerator"
		class="com.mmxlabs.optimiser.lso.movegenerators.impl.RandomMoveGenerator">
		<property name="random" ref="random" />
		<property name="moveGeneratorUnits">

			<list>
				<bean
					class="com.mmxlabs.optimiser.lso.movegenerators.impl.Move2over2GeneratorUnit" />
				<bean
					class="com.mmxlabs.optimiser.lso.movegenerators.impl.Move3over2GeneratorUnit" />
				<bean
					class="com.mmxlabs.optimiser.lso.movegenerators.impl.Move4over1GeneratorUnit" />
				<bean
					class="com.mmxlabs.optimiser.lso.movegenerators.impl.Move4over2GeneratorUnit" />
			</list>
		</property>
	</bean>

	<bean id="fitnessComponentInstantiator"
		class="com.mmxlabs.optimiser.core.fitness.impl.FitnessComponentInstantiator" />

	<bean id="fitnessComponents" factory-bean="fitnessComponentInstantiator"
		factory-method="instantiateFitnesses">
		<constructor-arg>
			<ref bean="fitnessRegistry" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="fitnessComponentNames" />
		</constructor-arg>
	</bean>

	<bean id="constraintCheckerInstantiator"
		class="com.mmxlabs.optimiser.core.constraints.impl.ConstraintCheckerInstantiator" />

	<bean id="constraintCheckers" factory-bean="constraintCheckerInstantiator"
		factory-method="instantiateConstraintCheckers">
		<constructor-arg>
			<ref bean="constraintCheckerRegistry" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="constraintCheckerNames" />
		</constructor-arg>
		<constructor-arg ref="optimisationData" />
	</bean>

	<bean id="fitnessHelper" class="com.mmxlabs.optimiser.core.fitness.impl.FitnessHelper" />

	<bean id="fitnessCombiner" class="com.mmxlabs.optimiser.lso.impl.LinearFitnessCombiner">
		<property name="fitnessComponentWeights" ref="fitnessWeights" />
	</bean>

	<bean id="fitnessEvaluator"
		class="com.mmxlabs.optimiser.lso.impl.LinearSimulatedAnnealingFitnessEvaluator"
		init-method="init" destroy-method="dispose">
		<property name="fitnessCombiner" ref="fitnessCombiner" />
		<property name="fitnessComponents" ref="fitnessComponents" />
		<property name="fitnessHelper" ref="fitnessHelper" />
		<!-- <property name="initialSequences" ref="initialSequences" /> -->
		<property name="optimisationData" ref="optimisationData" />
		<property name="thresholder" ref="thresholder" />
	</bean>


	<bean id="optimiser"
		class="com.mmxlabs.optimiser.lso.impl.DefaultLocalSearchOptimiser"
		init-method="init" destroy-method="dispose" p:numberOfIterations="${lso.numberOfIterations}"
		p:reportInterval="#{ T(java.lang.Math).max(10,${lso.reportInterval} / 100) }">
		<property name="fitnessEvaluator" ref="fitnessEvaluator" />
		<property name="constraintCheckers" ref="constraintCheckers" />
		<property name="sequenceManipulator" ref="manipulator" />
		<property name="moveGenerator" ref="moveGenerator" />
		<property name="progressMonitor" ref="progressMonitor" />
	</bean>
</beans>
