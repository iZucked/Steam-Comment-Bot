<%@ jet package="com.mmxlabs.models.mmxcore.templates.editor" imports="org.eclipse.emf.codegen.ecore.genmodel.*" class="ComponentHelper" version="1.0" %>
<% 
/**
 * <copyright>
 * Copyright (c) 2012 Minimax Labs Ltd. All Rights Reserved.
 * </copyright>
 */
 %>
<%final GenClass genClass = (GenClass) argument;%>
<%final GenPackage genPackage = genClass.getGenPackage();%>
<%final GenModel genModel = genPackage.getGenModel(); %>
<%final String thisClassName = genClass.getName()+"ComponentHelper"; %>
<%@ include file="../Header.javajetinc"%>
package <%=genPackage.getPresentationPackageName()%>.composites;

import com.mmxlabs.models.ui.BaseComponentHelper;
import com.mmxlabs.models.ui.ComponentHelperUtils;
import com.mmxlabs.models.ui.IComponentHelper;
import com.mmxlabs.models.ui.IInlineEditorContainer;
import com.mmxlabs.models.ui.registries.IComponentHelperRegistry;

import org.eclipse.core.runtime.IAdapterManager;
import org.eclipse.core.runtime.Platform;
<%genModel.markImportLocation(stringBuffer, genPackage);%>

/**
 * A component helper for <%=genClass.getName()%> instances
 *
 * @generated
 */
public class <%=thisClassName%> extends BaseComponentHelper {
	protected <%=genModel.getImportedName("java.util.List")%><IComponentHelper> superClassesHelpers = new <%=genModel.getImportedName("java.util.ArrayList")%><IComponentHelper>();

	/**
	 * Construct a new instance, using the platform adapter manager
	 *
	 * @generated
	 */
	public <%=thisClassName%>() {
		this(Platform.getAdapterManager());
	}

	/**
	 * Construct a new instance of this helper
	 *
	 * @generated
	 */
	public <%=thisClassName%>(IAdapterManager adapterManager) {
		final IComponentHelperRegistry registry = com.mmxlabs.models.ui.Activator.getDefault().getComponentHelperRegistry();
<% for (final GenClass superGenClass : genClass.getBaseGenClasses()) { %>
		superClassesHelpers.addAll(registry.getComponentHelpers(<%=superGenClass.getQualifiedClassifierAccessor()%>));
<% } // for superclasses %>
	}
	
	/**
	 * add editors to a composite, using <%=genClass.getName()%> as the supertype
	 *
	 * @generated
	 */
	 @Override
	public void addEditorsToComposite(final IInlineEditorContainer detailComposite) {
		addEditorsToComposite(detailComposite, <%=genClass.getQualifiedClassifierAccessor()%>);	
	}
	
	/**
	 * Create the editors for features on this class directly, and superclass' features.
	 *
	 * @generated
	 */
	@Override
	public void addEditorsToComposite(final IInlineEditorContainer detailComposite, final <%=genModel.getImportedName("org.eclipse.emf.ecore.EClass")%> topClass) {
		for (final IComponentHelper helper : superClassesHelpers) helper.addEditorsToComposite(detailComposite, topClass);
<% for (final GenFeature genFeature : genClass.getGenFeatures()) { %>
		add_<%=genFeature.getName()%>Editor(detailComposite, topClass);
<% } // genClass.getGenFeatures() %>
	}
<% for (final GenFeature genFeature : genClass.getGenFeatures()) { %>
	/**
	 * Create the editor for the <%=genFeature.getName()%> feature on <%=genClass.getName()%>
	 *
	 * @generated
	 */
	protected void add_<%=genFeature.getName()%>Editor(final IInlineEditorContainer detailComposite, final <%=genModel.getImportedName("org.eclipse.emf.ecore.EClass")%> topClass) {
		detailComposite.addInlineEditor(ComponentHelperUtils.createDefaultEditor(topClass, <%=genFeature.getQualifiedFeatureAccessor()%>));
	}
<% } %>
}
<%genModel.emitSortedImports();%>