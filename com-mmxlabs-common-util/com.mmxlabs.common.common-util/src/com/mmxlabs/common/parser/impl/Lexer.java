/**
 * Copyright (C) Minimax Labs Ltd., 2010 - 2023
 * All rights reserved.
 */
/* The following code was generated by JFlex 1.6.1 */

// Originally based on example from http://www2.cs.tum.edu/projekte/cup/examples.php

package com.mmxlabs.common.parser.impl;

import com.mmxlabs.common.parser.astnodes.*;

import java.time.Month;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>seriesparser.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, ParserSymbols {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\15\1\0\1\17\1\14\22\0\1\17\1\0\1\55"+
    "\1\10\1\0\1\64\2\0\1\60\1\61\1\62\1\4\1\56\1\13"+
    "\1\2\1\63\1\5\2\1\1\44\6\1\1\57\1\16\1\50\1\51"+
    "\1\52\1\65\1\6\1\21\1\45\1\20\1\40\1\3\1\23\1\42"+
    "\1\36\1\31\1\46\1\11\1\24\1\27\1\32\1\25\1\22\1\11"+
    "\1\26\1\35\1\37\1\43\1\41\1\11\1\33\1\47\1\11\1\53"+
    "\1\0\1\54\1\0\1\7\1\0\1\21\1\45\1\20\1\40\1\3"+
    "\1\23\1\42\1\36\1\31\1\46\1\11\1\24\1\12\1\32\1\25"+
    "\1\22\1\11\1\26\1\35\1\37\1\43\1\41\1\11\1\33\1\47"+
    "\1\11\265\0\2\30\115\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\2\2\1"+
    "\1\5\1\6\2\7\1\10\4\3\1\5\1\3\2\11"+
    "\4\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\3\1\30\1\0\1\31\1\32\1\0\1\3\1\0"+
    "\1\3\1\0\7\3\3\0\3\3\1\0\6\3\1\33"+
    "\1\34\2\0\1\35\2\32\1\36\1\37\1\40\2\41"+
    "\1\42\1\43\1\44\1\45\1\3\1\46\1\47\1\50"+
    "\2\0\1\50\2\3\1\0\1\3\1\51\2\3\1\52"+
    "\1\53\1\54\1\30\1\32\1\3\2\0\2\3\2\55"+
    "\2\3\1\56\1\0\1\57\1\3\1\57\2\3\1\0"+
    "\3\3\1\0\3\3\1\0\1\3\1\60\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\2\61\1\0\1\3\1\0"+
    "\1\3\1\0\1\62\1\3\1\62\1\0\1\3\1\0"+
    "\1\3\2\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\154\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\154\0\u021c\0\154\0\154\0\u0252"+
    "\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\154\0\u0510\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\u0546\0\u057c\0\u0144\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\154\0\154\0\u0b9a\0\u0bd0\0\u0c06\0\u010e\0\u0c3c\0\u010e"+
    "\0\u010e\0\u010e\0\154\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u0c72\0\u010e\0\u010e\0\154\0\u0ca8\0\u0cde\0\u010e\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u010e\0\u0dec\0\u0e22\0\u010e\0\u010e"+
    "\0\u010e\0\u0bd0\0\154\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\154\0\u010e\0\u0f66\0\u0f9c\0\u010e\0\u0fd2\0\154\0\u1008"+
    "\0\u010e\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u010e\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\154\0\u010e\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\154\0\u1518\0\u010e\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\154\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\6"+
    "\1\12\1\6\1\13\1\14\1\15\1\16\1\17\1\16"+
    "\1\20\1\21\1\6\1\22\1\6\1\23\1\6\1\24"+
    "\1\3\1\6\1\25\1\6\1\26\1\27\1\6\1\30"+
    "\1\31\1\32\2\6\1\4\1\6\1\33\1\6\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\66\3\67\0\1\4"+
    "\1\52\1\53\1\0\1\4\1\0\1\6\1\0\2\6"+
    "\5\0\10\6\1\0\3\6\1\0\7\6\1\4\3\6"+
    "\17\0\1\52\3\0\1\52\36\0\1\52\22\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\10\6\1\0\3\6\1\0\13\6\17\0\1\54"+
    "\1\52\1\53\1\0\1\54\1\0\1\6\1\0\2\6"+
    "\5\0\10\6\1\0\3\6\1\0\7\6\1\54\3\6"+
    "\17\0\1\55\1\0\1\55\1\0\1\55\1\0\1\55"+
    "\1\0\2\55\5\0\10\55\1\0\3\55\1\0\13\55"+
    "\21\0\1\56\5\0\2\56\5\0\10\56\1\0\3\56"+
    "\1\0\7\56\1\0\3\56\17\0\1\57\1\0\1\6"+
    "\1\0\1\57\1\0\1\6\1\0\2\6\1\60\4\0"+
    "\1\6\1\61\6\6\1\62\1\63\2\6\1\0\7\6"+
    "\1\57\3\6\33\0\1\64\51\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\1\6"+
    "\1\65\6\6\1\0\3\6\1\0\13\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\2\6\1\66\5\6\1\0\3\6\1\0\6\6"+
    "\1\67\4\6\17\0\1\6\1\0\1\70\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\4\6\1\71\3\6"+
    "\1\0\3\6\1\0\13\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\1\72"+
    "\7\6\1\0\3\6\1\0\13\6\17\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\5\0"+
    "\1\6\1\61\6\6\1\62\1\63\2\6\1\0\13\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\5\6\1\73\2\6\1\0\3\6"+
    "\1\0\13\6\21\0\1\74\16\0\1\75\13\0\1\76"+
    "\30\0\1\6\1\0\1\77\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\2\6\1\100\5\6\1\0\3\6"+
    "\1\0\1\6\1\101\11\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\102\1\103\2\6\1\0\13\6\17\0\1\6\1\0"+
    "\1\104\1\0\1\6\1\0\1\6\1\0\2\6\5\0"+
    "\1\6\1\105\6\6\1\0\3\6\1\0\13\6\17\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\5\0\5\6\1\106\2\6\1\0\3\6\1\0"+
    "\13\6\17\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\5\0\1\6\1\107\6\6\1\0"+
    "\3\6\1\0\6\6\1\110\4\6\67\0\1\111\65\0"+
    "\1\112\15\0\1\52\1\0\1\113\1\0\1\52\36\0"+
    "\1\52\22\0\1\6\1\0\1\6\1\114\1\6\1\0"+
    "\1\6\1\0\2\6\1\114\4\0\10\6\1\0\3\6"+
    "\1\0\13\6\17\0\1\55\1\0\1\115\1\0\1\55"+
    "\1\0\1\115\1\0\2\115\5\0\10\115\1\0\3\115"+
    "\1\0\7\115\1\55\3\115\17\0\1\56\1\0\1\56"+
    "\1\0\1\56\1\0\1\56\1\0\2\56\5\0\10\56"+
    "\1\0\3\56\1\0\13\56\17\0\1\116\1\0\1\6"+
    "\1\0\1\116\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\0\3\6\1\0\7\6\1\116\3\6\17\0\1\117"+
    "\42\0\1\117\22\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\6\6\1\120\1\6"+
    "\1\0\2\6\1\121\1\0\12\6\1\122\50\0\1\123"+
    "\34\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\1\6\1\124\1\6"+
    "\1\0\13\6\34\0\1\16\50\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\2\6"+
    "\1\125\5\6\1\0\3\6\1\0\13\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\6\6\1\126\1\6\1\0\3\6\1\0\13\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\3\6\1\0\5\6"+
    "\1\127\5\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\10\6\1\0\3\6"+
    "\1\0\10\6\1\130\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\5\6"+
    "\1\131\2\6\1\0\3\6\1\0\13\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\10\6\1\0\3\6\1\0\2\6\1\132\10\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\3\6\1\0\4\6"+
    "\1\133\6\6\40\0\1\134\67\0\1\135\71\0\2\136"+
    "\35\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\2\6\1\137\5\6\1\0\3\6"+
    "\1\0\13\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\4\6\1\140\3\6"+
    "\1\0\3\6\1\0\13\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\136\1\141\2\6\1\0\13\6\21\0\1\142\63\0"+
    "\1\6\1\0\1\143\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\5\0\10\6\1\0\3\6\1\0\13\6\17\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\5\0\1\144\7\6\1\0\3\6\1\0\13\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\3\6\1\0\2\6"+
    "\1\145\10\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\4\6\1\146\3\6"+
    "\1\0\3\6\1\0\13\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\0\1\6\1\147\1\6\1\0\13\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\4\6\1\150\3\6\1\0\1\6\1\151\1\6"+
    "\1\0\13\6\17\0\1\152\2\0\1\114\1\152\5\0"+
    "\1\114\30\0\1\152\22\0\1\152\3\0\1\152\36\0"+
    "\1\152\22\0\1\115\1\0\1\115\1\0\1\115\1\0"+
    "\1\115\1\0\2\115\5\0\10\115\1\0\3\115\1\0"+
    "\13\115\17\0\1\153\3\0\1\153\36\0\1\153\22\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\5\0\5\6\1\154\2\6\1\0\3\6\1\0"+
    "\13\6\46\0\2\155\57\0\1\156\43\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\5\0"+
    "\10\6\1\155\1\157\2\6\1\0\13\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\3\6\1\160\4\6\1\0\3\6\1\0\13\6"+
    "\44\0\1\161\40\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\6\6\1\162\1\6"+
    "\1\0\3\6\1\0\13\6\17\0\1\6\1\0\1\163"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\0\3\6\1\0\13\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\0\3\6\1\0\6\6\1\164\4\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\6\6\1\165\1\6\1\0\3\6\1\0\13\6"+
    "\55\0\1\166\65\0\1\167\27\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\0\3\6\1\0\2\6\1\170\10\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\10\6\1\0\3\6\1\0\2\6\1\171\10\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\3\6\1\0\3\6"+
    "\1\172\7\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\173\5\0\7\6\1\173"+
    "\1\0\3\6\1\0\13\6\30\0\1\174\14\0\1\174"+
    "\37\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\175\5\0\7\6\1\175\1\0\3\6"+
    "\1\0\13\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\1\6\1\176\6\6"+
    "\1\0\3\6\1\0\13\6\17\0\1\6\1\0\1\177"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\5\0\10\6"+
    "\1\0\3\6\1\0\13\6\43\0\1\200\41\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\5\6\1\201\2\6\1\0\3\6\1\0\13\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\3\6\1\0\4\6"+
    "\1\202\6\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\10\6\1\0\3\6"+
    "\1\0\2\6\1\203\10\6\50\0\1\204\34\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\5\0\10\6\1\0\1\6\1\205\1\6\1\0\13\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\5\0\10\6\1\0\3\6\1\0\5\6"+
    "\1\206\5\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\5\0\10\6\1\207\1\210"+
    "\2\6\1\0\13\6\55\0\1\211\27\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\5\0"+
    "\10\6\1\0\3\6\1\0\2\6\1\212\10\6\21\0"+
    "\1\213\63\0\1\6\1\0\1\214\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\5\0\10\6\1\0\3\6\1\0"+
    "\13\6\54\0\1\215\30\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\5\0\10\6\1\0"+
    "\3\6\1\0\1\6\1\216\11\6\44\0\1\217\40\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\5\0\6\6\1\220\1\6\1\0\3\6\1\0"+
    "\13\6\30\0\1\221\14\0\1\221\37\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\222"+
    "\5\0\7\6\1\222\1\0\3\6\1\0\13\6\30\0"+
    "\1\223\14\0\1\223\14\0\1\224\22\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\225"+
    "\5\0\7\6\1\225\1\0\3\6\1\0\7\6\1\226"+
    "\3\6\63\0\1\227\21\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\5\0\10\6\1\0"+
    "\3\6\1\0\10\6\1\230\2\6\55\0\1\231\27\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\5\0\10\6\1\0\3\6\1\0\2\6\1\232"+
    "\10\6\61\0\1\233\23\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\5\0\10\6\1\0"+
    "\3\6\1\0\6\6\1\234\4\6\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\4\1\1\11\1\1\2\11"+
    "\15\1\1\11\1\1\13\11\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\7\1\3\0\3\1\1\0"+
    "\6\1\2\11\2\0\6\1\1\11\10\1\1\11\2\0"+
    "\3\1\1\0\10\1\1\11\1\1\2\0\2\1\1\11"+
    "\4\1\1\0\1\11\4\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public Lexer(java.io.Reader in, ComplexSymbolFactory sf){
	this(in);
	symbolFactory = sf;
    }
    ComplexSymbolFactory symbolFactory;

  private Symbol symbol(String name, int sym) {
      return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }

  private Symbol symbol(String name, int sym, Object val) {
      Location left = new Location(yyline+1,yycolumn+1,yychar);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private Symbol symbol(String name, int sym, Object val,int buflength) {
      Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private void error(String message) {
    throw new com.mmxlabs.common.parser.series.GenericSeriesParsesException(message + " at column "+(yycolumn+1)+".");
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    error("Illegal character <"+ yytext()+">");
            }
          case 52: break;
          case 2: 
            { return symbol("integer", INTEGER, Integer.valueOf(yytext()) );
            }
          case 53: break;
          case 3: 
            { return symbol("namedelement", NAMED_ELEMENT, new String(yytext()) );
            }
          case 54: break;
          case 4: 
            { return symbol("plus",PLUS  );
            }
          case 55: break;
          case 5: 
            { return symbol("m", M, Integer.valueOf(0) );
            }
          case 56: break;
          case 6: 
            { return symbol("minus",MINUS  );
            }
          case 57: break;
          case 7: 
            { /* ignore */
            }
          case 58: break;
          case 8: 
            { return symbol("semicolon",SEMICOLON);
            }
          case 59: break;
          case 9: 
            { return symbol("scurve", S);
            }
          case 60: break;
          case 10: 
            { return symbol("<",LT, ComparisonOperators.LT);
            }
          case 61: break;
          case 11: 
            { return symbol("equals",EQUALS);
            }
          case 62: break;
          case 12: 
            { return symbol(">",GT, ComparisonOperators.GT);
            }
          case 63: break;
          case 13: 
            { return symbol("[",LBRACKET);
            }
          case 64: break;
          case 14: 
            { return symbol("]",RBRACKET);
            }
          case 65: break;
          case 15: 
            { string.setLength(0); yybegin(STRING);
            }
          case 66: break;
          case 16: 
            { return symbol("comma",COMMA);
            }
          case 67: break;
          case 17: 
            { return symbol("colon",COLON);
            }
          case 68: break;
          case 18: 
            { return symbol("(",LPAREN);
            }
          case 69: break;
          case 19: 
            { return symbol(")",RPAREN);
            }
          case 70: break;
          case 20: 
            { return symbol("mul",TIMES  );
            }
          case 71: break;
          case 21: 
            { return symbol("div",DIVIDE  );
            }
          case 72: break;
          case 22: 
            { return symbol("percent",PERCENT  );
            }
          case 73: break;
          case 23: 
            { return symbol("question",QUESTION  );
            }
          case 74: break;
          case 24: 
            { return symbol("float", FLOAT, new Double(yytext()) );
            }
          case 75: break;
          case 25: 
            { return symbol("var", VAR, new String(yytext()).replace("#","") );
            }
          case 76: break;
          case 26: 
            { return symbol("m", M, Integer.valueOf(yytext().replace("m","")) );
            }
          case 77: break;
          case 27: 
            { return symbol("<=",LTE, ComparisonOperators.LTE);
            }
          case 78: break;
          case 28: 
            { return symbol(">=",GTE, ComparisonOperators.GTE);
            }
          case 79: break;
          case 29: 
            { return symbol("param", PARAM, new String(yytext()).replace("@","") );
            }
          case 80: break;
          case 30: 
            { return symbol("mar",MONTH, Month.MARCH);
            }
          case 81: break;
          case 31: 
            { return symbol("max",MAX);
            }
          case 82: break;
          case 32: 
            { return symbol("may",MONTH, Month.MAY);
            }
          case 83: break;
          case 33: 
            { return symbol("min",MIN);
            }
          case 84: break;
          case 34: 
            { return symbol("cap",CAP);
            }
          case 85: break;
          case 35: 
            { return symbol("apr",MONTH, Month.APRIL);
            }
          case 86: break;
          case 36: 
            { return symbol("aug",MONTH, Month.AUGUST);
            }
          case 87: break;
          case 37: 
            { return symbol("feb",MONTH, Month.FEBRUARY);
            }
          case 88: break;
          case 38: 
            { return symbol("oct",MONTH, Month.OCTOBER);
            }
          case 89: break;
          case 39: 
            { return symbol("nov",MONTH, Month.NOVEMBER);
            }
          case 90: break;
          case 40: 
            { return symbol("sep",MONTH, Month.SEPTEMBER);
            }
          case 91: break;
          case 41: 
            { return symbol("dec",MONTH, Month.DECEMBER);
            }
          case 92: break;
          case 42: 
            { return symbol("jan",MONTH, Month.JANUARY);
            }
          case 93: break;
          case 43: 
            { return symbol("jul",MONTH, Month.JULY);
            }
          case 94: break;
          case 44: 
            { return symbol("jun",MONTH, Month.JUNE);
            }
          case 95: break;
          case 45: 
            { return symbol("tier", TIER);
            }
          case 96: break;
          case 46: 
            { return symbol("floor",FLOOR);
            }
          case 97: break;
          case 47: 
            { return symbol("shift",SHIFT);
            }
          case 98: break;
          case 48: 
            { return symbol("datedavg",DATEDAVG);
            }
          case 99: break;
          case 49: 
            { return symbol("splitmonth", SPLITMONTH);
            }
          case 100: break;
          case 50: 
            { return symbol("volumetierm3", VOLUMETIERM3);
            }
          case 101: break;
          case 51: 
            { return symbol("volumetiermmbtu", VOLUMETIERMMBTU);
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
