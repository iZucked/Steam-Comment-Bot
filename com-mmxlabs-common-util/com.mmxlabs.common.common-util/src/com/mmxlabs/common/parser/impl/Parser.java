
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mmxlabs.common.parser.impl;

import java_cup.runtime.*;
import java.util.*;
import java.time.*;
import com.mmxlabs.common.parser.astnodes.*;
import com.mmxlabs.common.parser.series.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\005\003\000\002\005\005\000\002\004\005" +
    "\000\002\007\003\000\002\007\003\000\002\006\003\000" +
    "\002\006\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\010\000\002\003" +
    "\010\000\002\003\010\000\002\003\010\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\010\000\002\003\011\000\002\003\006\000\002" +
    "\003\006\000\002\003\014\000\002\003\012\000\002\003" +
    "\006\000\002\003\012\000\002\003\012\000\002\003\012" +
    "\000\002\003\026\000\002\003\015\000\002\003\022\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\052\004\005\005\022\012\014\020\004\021" +
    "\016\022\013\023\023\024\027\025\012\026\011\027\025" +
    "\030\007\031\024\032\010\033\021\044\026\045\017\046" +
    "\032\047\030\050\033\001\002\000\026\002\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\013\uffd7\014\uffd7\016\uffd7\017" +
    "\244\034\uffd7\001\002\000\052\004\005\005\022\012\014" +
    "\020\004\021\016\022\013\023\023\024\027\025\012\026" +
    "\011\027\025\030\007\031\024\032\010\033\021\044\026" +
    "\045\017\046\032\047\030\050\041\001\002\000\016\002" +
    "\000\004\042\005\043\006\045\007\044\014\046\001\002" +
    "\000\004\012\220\001\002\000\004\012\211\001\002\000" +
    "\004\012\200\001\002\000\004\012\170\001\002\000\004" +
    "\012\163\001\002\000\052\004\005\005\022\012\014\020" +
    "\004\021\016\022\013\023\023\024\027\025\012\026\011" +
    "\027\025\030\007\031\024\032\010\033\021\044\026\045" +
    "\017\046\032\047\030\050\041\001\002\000\004\034\156" +
    "\001\002\000\004\012\151\001\002\000\026\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\013\uffd9\014\uffd9\016\uffd9" +
    "\017\ufff8\034\uffd9\001\002\000\004\017\147\001\002\000" +
    "\004\012\124\001\002\000\052\004\005\005\022\012\014" +
    "\020\004\021\016\022\013\023\023\024\027\025\012\026" +
    "\011\027\025\030\007\031\024\032\010\033\021\044\026" +
    "\045\017\046\032\047\030\050\041\001\002\000\004\012" +
    "\116\001\002\000\004\012\105\001\002\000\004\012\076" +
    "\001\002\000\026\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\017\ufff9\034\uffd8\001\002" +
    "\000\004\012\067\001\002\000\024\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\013\uffda\014\uffda\016\uffda\034\uffda" +
    "\001\002\000\004\034\ufffe\001\002\000\024\002\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\034\uffdb\001\002\000\022\002\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\014\uffd6\017\036\035\037\001\002\000\004" +
    "\002\035\001\002\000\004\002\001\001\002\000\052\004" +
    "\005\005\022\012\014\020\004\021\016\022\013\023\023" +
    "\024\027\025\012\026\011\027\025\030\007\031\024\032" +
    "\010\033\021\044\026\045\017\046\032\047\030\050\041" +
    "\001\002\000\052\004\005\005\022\012\014\020\004\021" +
    "\016\022\013\023\023\024\027\025\012\026\011\027\025" +
    "\030\007\031\024\032\010\033\021\044\026\045\017\046" +
    "\032\047\030\050\041\001\002\000\016\004\042\005\043" +
    "\006\045\007\044\014\046\034\ufffc\001\002\000\026\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\036\034\uffd6\001\002\000\052\004\005\005" +
    "\022\012\014\020\004\021\016\022\013\023\023\024\027" +
    "\025\012\026\011\027\025\030\007\031\024\032\010\033" +
    "\021\044\026\045\017\046\032\047\030\050\041\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\041\001\002\000\052\004\005\005\022\012\014" +
    "\020\004\021\016\022\013\023\023\024\027\025\012\026" +
    "\011\027\025\030\007\031\024\032\010\033\021\044\026" +
    "\045\017\046\032\047\030\050\041\001\002\000\052\004" +
    "\005\005\022\012\014\020\004\021\016\022\013\023\023" +
    "\024\027\025\012\026\011\027\025\030\007\031\024\032" +
    "\010\033\021\044\026\045\017\046\032\047\030\050\041" +
    "\001\002\000\010\042\051\043\050\044\047\001\002\000" +
    "\006\015\055\016\054\001\002\000\004\015\053\001\002" +
    "\000\004\015\052\001\002\000\024\002\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\013\uffe9\014\uffe9\016\uffe9\034\uffe9" +
    "\001\002\000\024\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\034\uffe8\001\002\000\004" +
    "\044\056\001\002\000\024\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\013\uffe5\014\uffe5\016\uffe5\034\uffe5\001\002" +
    "\000\004\016\057\001\002\000\004\044\060\001\002\000" +
    "\004\015\061\001\002\000\024\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\013\uffe6\014\uffe6\016\uffe6\034\uffe6\001" +
    "\002\000\024\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\044" +
    "\013\ufff5\014\046\016\ufff5\034\ufff5\001\002\000\024\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\013\ufff4\014\046" +
    "\016\ufff4\034\ufff4\001\002\000\024\002\ufff6\004\ufff6\005" +
    "\ufff6\006\045\007\044\013\ufff6\014\046\016\ufff6\034\ufff6" +
    "\001\002\000\024\002\ufff7\004\ufff7\005\ufff7\006\045\007" +
    "\044\013\ufff7\014\046\016\ufff7\034\ufff7\001\002\000\024" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\013\uffee\014" +
    "\046\016\uffee\034\uffee\001\002\000\052\004\005\005\022" +
    "\012\014\020\004\021\016\022\013\023\023\024\027\025" +
    "\012\026\011\027\025\030\007\031\024\032\010\033\021" +
    "\044\026\045\017\046\032\047\030\050\041\001\002\000" +
    "\016\004\042\005\043\006\045\007\044\014\046\016\071" +
    "\001\002\000\052\004\005\005\022\012\014\020\004\021" +
    "\016\022\013\023\023\024\027\025\012\026\011\027\025" +
    "\030\007\031\024\032\010\033\021\044\026\045\017\046" +
    "\032\047\030\050\041\001\002\000\016\004\042\005\043" +
    "\006\045\007\044\013\073\014\046\001\002\000\024\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\013\ufff0\014\ufff0" +
    "\016\ufff0\034\ufff0\001\002\000\052\004\005\005\022\012" +
    "\014\020\004\021\016\022\013\023\023\024\027\025\012" +
    "\026\011\027\025\030\007\031\024\032\010\033\021\044" +
    "\026\045\017\046\032\047\030\050\041\001\002\000\024" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\013\uffef\014" +
    "\046\016\uffef\034\uffef\001\002\000\052\004\005\005\022" +
    "\012\014\020\004\021\016\022\013\023\023\024\027\025" +
    "\012\026\011\027\025\030\007\031\024\032\010\033\021" +
    "\044\026\045\017\046\032\047\030\050\041\001\002\000" +
    "\016\004\042\005\043\006\045\007\044\014\046\016\100" +
    "\001\002\000\052\004\005\005\022\012\014\020\004\021" +
    "\016\022\013\023\023\024\027\025\012\026\011\027\025" +
    "\030\007\031\024\032\010\033\021\044\026\045\017\046" +
    "\032\047\030\050\041\001\002\000\016\004\042\005\043" +
    "\006\045\007\044\014\046\016\102\001\002\000\004\044" +
    "\103\001\002\000\004\013\104\001\002\000\024\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\034\uffe2\001\002\000\052\004\005\005\022\012\014" +
    "\020\004\021\016\022\013\023\023\024\027\025\012\026" +
    "\011\027\025\030\007\031\024\032\010\033\021\044\026" +
    "\045\017\046\032\047\030\050\041\001\002\000\016\004" +
    "\042\005\043\006\045\007\044\014\046\016\107\001\002" +
    "\000\006\044\110\045\112\001\002\000\006\013\ufff9\016" +
    "\ufff9\001\002\000\004\016\113\001\002\000\006\013\ufff8" +
    "\016\ufff8\001\002\000\052\004\005\005\022\012\014\020" +
    "\004\021\016\022\013\023\023\024\027\025\012\026\011" +
    "\027\025\030\007\031\024\032\010\033\021\044\026\045" +
    "\017\046\032\047\030\050\041\001\002\000\016\004\042" +
    "\005\043\006\045\007\044\013\115\014\046\001\002\000" +
    "\024\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\034\uffe4\001\002\000\052\004\005\005" +
    "\022\012\014\020\004\021\016\022\013\023\023\024\027" +
    "\025\012\026\011\027\025\030\007\031\024\032\010\033" +
    "\021\044\026\045\017\046\032\047\030\050\041\001\002" +
    "\000\016\004\042\005\043\006\045\007\044\014\046\016" +
    "\120\001\002\000\052\004\005\005\022\012\014\020\004" +
    "\021\016\022\013\023\023\024\027\025\012\026\011\027" +
    "\025\030\007\031\024\032\010\033\021\044\026\045\017" +
    "\046\032\047\030\050\041\001\002\000\016\004\042\005" +
    "\043\006\045\007\044\013\122\014\046\001\002\000\024" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\034\ufff1\001\002\000\024\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\013\uffde\014\046\016\uffde\034" +
    "\uffde\001\002\000\052\004\005\005\022\012\014\020\004" +
    "\021\016\022\013\023\023\024\027\025\012\026\011\027" +
    "\025\030\007\031\024\032\010\033\021\044\026\045\017" +
    "\046\032\047\030\050\041\001\002\000\016\004\042\005" +
    "\043\006\045\007\044\014\046\016\126\001\002\000\006" +
    "\036\127\037\130\001\002\000\006\044\ufffb\045\ufffb\001" +
    "\002\000\006\044\ufffa\045\ufffa\001\002\000\006\044\110" +
    "\045\112\001\002\000\004\016\133\001\002\000\052\004" +
    "\005\005\022\012\014\020\004\021\016\022\013\023\023" +
    "\024\027\025\012\026\011\027\025\030\007\031\024\032" +
    "\010\033\021\044\026\045\017\046\032\047\030\050\041" +
    "\001\002\000\016\004\042\005\043\006\045\007\044\014" +
    "\046\016\135\001\002\000\056\004\005\005\022\012\014" +
    "\020\004\021\016\022\013\023\023\024\027\025\012\026" +
    "\011\027\025\030\007\031\024\032\010\033\021\036\127" +
    "\037\130\044\026\045\017\046\032\047\030\050\041\001" +
    "\002\000\016\004\042\005\043\006\045\007\044\013\146" +
    "\014\046\001\002\000\006\044\110\045\112\001\002\000" +
    "\004\016\141\001\002\000\052\004\005\005\022\012\014" +
    "\020\004\021\016\022\013\023\023\024\027\025\012\026" +
    "\011\027\025\030\007\031\024\032\010\033\021\044\026" +
    "\045\017\046\032\047\030\050\041\001\002\000\016\004" +
    "\042\005\043\006\045\007\044\014\046\016\143\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\041\001\002\000\016\004\042\005\043\006\045" +
    "\007\044\013\145\014\046\001\002\000\024\002\uffdf\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf\016\uffdf" +
    "\034\uffdf\001\002\000\024\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\013\uffe0\014\uffe0\016\uffe0\034\uffe0\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\041\001\002\000\024\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\013\uffed\014\046\016\uffed\034\uffed\001" +
    "\002\000\052\004\005\005\022\012\014\020\004\021\016" +
    "\022\013\023\023\024\027\025\012\026\011\027\025\030" +
    "\007\031\024\032\010\033\021\044\026\045\017\046\032" +
    "\047\030\050\041\001\002\000\016\004\042\005\043\006" +
    "\045\007\044\014\046\016\153\001\002\000\052\004\005" +
    "\005\022\012\014\020\004\021\016\022\013\023\023\024" +
    "\027\025\012\026\011\027\025\030\007\031\024\032\010" +
    "\033\021\044\026\045\017\046\032\047\030\050\041\001" +
    "\002\000\016\004\042\005\043\006\045\007\044\013\155" +
    "\014\046\001\002\000\024\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\013\ufff3\014\ufff3\016\ufff3\034\ufff3\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\033\001\002\000\016\002\uffff\004\042\005\043" +
    "\006\045\007\044\014\046\001\002\000\004\034\ufffd\001" +
    "\002\000\016\004\042\005\043\006\045\007\044\013\162" +
    "\014\046\001\002\000\024\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\013\uffdc\014\uffdc\016\uffdc\034\uffdc\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\041\001\002\000\016\004\042\005\043\006\045" +
    "\007\044\014\046\016\165\001\002\000\052\004\005\005" +
    "\022\012\014\020\004\021\016\022\013\023\023\024\027" +
    "\025\012\026\011\027\025\030\007\031\024\032\010\033" +
    "\021\044\026\045\017\046\032\047\030\050\041\001\002" +
    "\000\016\004\042\005\043\006\045\007\044\013\167\014" +
    "\046\001\002\000\024\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\013\ufff2\014\ufff2\016\ufff2\034\ufff2\001\002\000" +
    "\052\004\005\005\022\012\014\020\004\021\016\022\013" +
    "\023\023\024\027\025\012\026\011\027\025\030\007\031" +
    "\024\032\010\033\021\044\026\045\017\046\032\047\030" +
    "\050\041\001\002\000\016\004\042\005\043\006\045\007" +
    "\044\014\046\016\172\001\002\000\006\005\174\044\173" +
    "\001\002\000\004\013\177\001\002\000\004\044\175\001" +
    "\002\000\004\013\176\001\002\000\024\002\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\013\uffea\014\uffea\016\uffea\034" +
    "\uffea\001\002\000\024\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\013\uffeb\014\uffeb\016\uffeb\034\uffeb\001\002\000" +
    "\052\004\005\005\022\012\014\020\004\021\016\022\013" +
    "\023\023\024\027\025\012\026\011\027\025\030\007\031" +
    "\024\032\010\033\021\044\026\045\017\046\032\047\030" +
    "\050\041\001\002\000\016\004\042\005\043\006\045\007" +
    "\044\014\046\016\202\001\002\000\004\044\203\001\002" +
    "\000\004\016\204\001\002\000\004\044\205\001\002\000" +
    "\004\016\206\001\002\000\004\044\207\001\002\000\004" +
    "\013\210\001\002\000\024\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\013\uffe7\014\uffe7\016\uffe7\034\uffe7\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\041\001\002\000\016\004\042\005\043\006\045" +
    "\007\044\014\046\016\213\001\002\000\006\044\110\045" +
    "\112\001\002\000\004\016\215\001\002\000\052\004\005" +
    "\005\022\012\014\020\004\021\016\022\013\023\023\024" +
    "\027\025\012\026\011\027\025\030\007\031\024\032\010" +
    "\033\021\044\026\045\017\046\032\047\030\050\041\001" +
    "\002\000\016\004\042\005\043\006\045\007\044\013\217" +
    "\014\046\001\002\000\024\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\013\uffe3\014\uffe3\016\uffe3\034\uffe3\001\002" +
    "\000\052\004\005\005\022\012\014\020\004\021\016\022" +
    "\013\023\023\024\027\025\012\026\011\027\025\030\007" +
    "\031\024\032\010\033\021\044\026\045\017\046\032\047" +
    "\030\050\041\001\002\000\016\004\042\005\043\006\045" +
    "\007\044\014\046\016\222\001\002\000\006\044\110\045" +
    "\112\001\002\000\004\016\224\001\002\000\006\044\110" +
    "\045\112\001\002\000\004\016\226\001\002\000\006\044" +
    "\110\045\112\001\002\000\004\016\230\001\002\000\006" +
    "\044\110\045\112\001\002\000\004\016\232\001\002\000" +
    "\006\044\110\045\112\001\002\000\004\016\234\001\002" +
    "\000\006\044\110\045\112\001\002\000\004\016\236\001" +
    "\002\000\006\044\110\045\112\001\002\000\004\016\240" +
    "\001\002\000\006\044\110\045\112\001\002\000\004\013" +
    "\242\001\002\000\024\002\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\013\uffe1\014\uffe1\016\uffe1\034\uffe1\001\002\000" +
    "\024\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd" +
    "\014\046\016\uffdd\034\uffdd\001\002\000\052\004\005\005" +
    "\022\012\014\020\004\021\016\022\013\023\023\024\027" +
    "\025\012\026\011\027\025\030\007\031\024\032\010\033" +
    "\021\044\026\045\017\046\032\047\030\050\041\001\002" +
    "\000\024\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\013" +
    "\uffec\014\046\016\uffec\034\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\002\033\003\005\004\030\005\014\006" +
    "\017\001\001\000\002\001\001\000\006\003\242\006\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\160\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\122\006\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\065\006\017\001\001\000\006\003" +
    "\037\006\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\064\006\017\001\001\000\006\003\063\006" +
    "\017\001\001\000\006\003\062\006\017\001\001\000\006" +
    "\003\061\006\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\067" +
    "\006\017\001\001\000\002\001\001\000\006\003\071\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\074\006\017\001\001\000\002\001\001\000\006\003" +
    "\076\006\017\001\001\000\002\001\001\000\006\003\100" +
    "\006\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\105\006\017" +
    "\001\001\000\002\001\001\000\004\006\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\113\006\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\116\006\017\001\001\000\002\001\001" +
    "\000\006\003\120\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\124\006\017" +
    "\001\001\000\002\001\001\000\004\007\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\131\001\001" +
    "\000\002\001\001\000\006\003\133\006\017\001\001\000" +
    "\002\001\001\000\010\003\135\006\017\007\136\001\001" +
    "\000\002\001\001\000\004\006\137\001\001\000\002\001" +
    "\001\000\006\003\141\006\017\001\001\000\002\001\001" +
    "\000\006\003\143\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\147\006\017" +
    "\001\001\000\002\001\001\000\006\003\151\006\017\001" +
    "\001\000\002\001\001\000\006\003\153\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\156\004" +
    "\157\006\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\163\006" +
    "\017\001\001\000\002\001\001\000\006\003\165\006\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\170\006\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\200\006\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\211\006" +
    "\017\001\001\000\002\001\001\000\004\006\213\001\001" +
    "\000\002\001\001\000\006\003\215\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\220\006\017" +
    "\001\001\000\002\001\001\000\004\006\222\001\001\000" +
    "\002\001\001\000\004\006\224\001\001\000\002\001\001" +
    "\000\004\006\226\001\001\000\002\001\001\000\004\006" +
    "\230\001\001\000\002\001\001\000\004\006\232\001\001" +
    "\000\002\001\001\000\004\006\234\001\001\000\002\001" +
    "\001\000\004\006\236\001\001\000\002\001\001\000\004" +
    "\006\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\244\006\017\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Constructor, needed for call to scan later
    private Lexer s;
   public Parser(Lexer s){super(s,s.symbolFactory); this.s=s; }
    
    private SeriesParserData seriesParserData;
    public SeriesParserData getSeriesParserData() { return seriesParserData; }
    public void setSeriesParserData(SeriesParserData seriesParserData) { this.seriesParserData = seriesParserData; }
    
    private SeriesParser seriesParser;
    public SeriesParser getSeriesParser() { return seriesParser; }
    public void setSeriesParser(SeriesParser seriesParser) { this.seriesParser = seriesParser; }
    
    // Error capturing
    public List<Symbol> errors = new LinkedList<>();
	public void syntax_error(Symbol s){	errors.add(s); }
	
	private Map<String, ASTNode> userVariables = new HashMap<>();
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= full_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // full_expr ::= expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =e;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // full_expr ::= stmt_list SEMICOLON expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =e;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list SEMICOLON stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= VAR EQUALS expr 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 userVariables.put(n,e);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LTOPS ::= LT 
            {
              ComparisonOperators RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComparisonOperators n = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTOPS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LTOPS ::= LTE 
            {
              ComparisonOperators RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComparisonOperators n = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTOPS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NUMBER ::= INTEGER 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NUMBER ::= FLOAT 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr PLUS expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, Operator.PLUS, rhs);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr MINUS expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs,Operator.MINUS, rhs);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr TIMES expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs,  Operator.TIMES, rhs);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr DIVIDE expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, Operator.DIVIDE, rhs);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= CAP LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.CAP);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= FLOOR LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.FLOOR);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= MIN LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.MIN);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= MAX LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.MAX);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= INTEGER PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer lhs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new ConstantASTNode(lhs),Operator.PERCENT, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= VAR PERCENT expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(userVariables.get(v),Operator.PERCENT, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= NUMBER PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Number lhs = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new ConstantASTNode(lhs), Operator.PERCENT, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= QUESTION PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lhs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new BreakEvenASTNode(), Operator.PERCENT, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= SHIFT LPAREN expr COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, i1, ShiftFunctionASTNode.InputMode.FUNCTION);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= SHIFT LPAREN expr COMMA MINUS INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, -i1, ShiftFunctionASTNode.InputMode.FUNCTION);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LBRACKET M RBRACKET 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, -i1, ShiftFunctionASTNode.InputMode.NOTATION);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr LBRACKET MONTH RBRACKET 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Month m1 = (Month)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MonthFunctionASTNode(e1, m1);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= DATEDAVG LPAREN expr COMMA INTEGER COMMA INTEGER COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, n1, n2, n3, DatedAvgFunctionASTNode.InputMode.FUNCTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr LBRACKET INTEGER COMMA INTEGER COMMA INTEGER RBRACKET 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, n1, n2, n3, DatedAvgFunctionASTNode.InputMode.NOTATION_WITH_COMMA);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr LBRACKET INTEGER RBRACKET 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, a1, DatedAvgFunctionASTNode.InputMode.NOTATION_WITHOUT_COMMA);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= VOLUMETIERM3 LPAREN expr COMMA NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode low = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number n1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode high = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new VolumeTierASTNode(true, low, n1, high); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= VOLUMETIERMMBTU LPAREN expr COMMA NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode low = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number n1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode high = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new VolumeTierASTNode(false, low, n1, high); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= SPLITMONTH LPAREN expr COMMA expr COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SplitMonthFunctionASTNode(e1, e2, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= S LPAREN expr COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER RPAREN 
            {
              ASTNode RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		ASTNode base = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int lowerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int lowerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Number lower = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int higherleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int higherright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Number higher = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Number a1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Number b1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Number a2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number b2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number a3 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int b3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Number b3 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SCurveFunctionASTNode(base, lower, higher, a1,b1,a2,b2,a3,b3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= TIER LPAREN expr COMMA LTOPS NUMBER COMMA expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lowOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lowOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComparisonOperators lowOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number low = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lowValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lowValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode lowValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode highValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Tier2FunctionASTNode(target, lowOp, low, lowValue, highValue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= TIER LPAREN expr COMMA LTOPS NUMBER COMMA expr COMMA LTOPS NUMBER COMMA expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int lowOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int lowOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ComparisonOperators lowOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Number low = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int lowValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lowValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode lowValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int midOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int midOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComparisonOperators midOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int midleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int midright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number mid = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int midValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int midValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode midValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode highValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Tier3FunctionASTNode(target, lowOp, low, lowValue, midOp, mid, midValue, highValue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= MINUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusASTNode(e);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= PLUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LPAREN expr RPAREN 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= SERIES 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= NAMED_ELEMENT 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = seriesParser.getNamedSeriesASTNode(n);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= FLOAT 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ConstantASTNode(n);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= INTEGER 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ConstantASTNode(n);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= QUESTION 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new BreakEvenASTNode();           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= VAR 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = userVariables.get(v);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
