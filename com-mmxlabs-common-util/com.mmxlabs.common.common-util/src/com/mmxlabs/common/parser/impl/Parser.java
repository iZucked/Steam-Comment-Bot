
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mmxlabs.common.parser.impl;

import java_cup.runtime.*;
import java.util.*;
import com.google.common.collect.*;
import java.time.*;
import com.google.common.collect.Lists;
import com.mmxlabs.common.parser.astnodes.*;
import com.mmxlabs.common.parser.series.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\005\003\000\002\005\005\000\002\004\005" +
    "\000\002\010\003\000\002\010\003\000\002\007\003\000" +
    "\002\007\003\000\002\006\003\000\002\006\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\010\000\002" +
    "\003\011\000\002\003\006\000\002\003\006\000\002\003" +
    "\014\000\002\003\012\000\002\003\006\000\002\003\014" +
    "\000\002\003\012\000\002\003\026\000\002\003\012\000" +
    "\002\003\015\000\002\003\022\000\002\003\015\000\002" +
    "\003\022\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\054\004\005\005\022\012\013\021\004\022" +
    "\015\023\010\024\024\025\027\026\011\027\012\030\025" +
    "\031\007\032\023\033\021\034\020\046\026\047\016\050" +
    "\033\051\030\052\031\053\034\001\002\000\026\002\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\016" +
    "\uffd3\020\261\035\uffd3\001\002\000\054\004\005\005\022" +
    "\012\013\021\004\022\015\023\010\024\024\025\027\026" +
    "\011\027\012\030\025\031\007\032\023\033\021\034\020" +
    "\046\026\047\016\050\033\051\030\052\031\053\042\001" +
    "\002\000\016\002\000\004\043\005\044\006\047\007\045" +
    "\014\046\001\002\000\004\012\235\001\002\000\004\012" +
    "\232\001\002\000\004\012\222\001\002\000\004\012\211" +
    "\001\002\000\054\004\005\005\022\012\013\021\004\022" +
    "\015\023\010\024\024\025\027\026\011\027\012\030\025" +
    "\031\007\032\023\033\021\034\020\046\026\047\016\050" +
    "\033\051\030\052\031\053\042\001\002\000\004\035\204" +
    "\001\002\000\004\012\201\001\002\000\026\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\020\ufff8\035\uffd5\001\002\000\004\020\177\001\002\000" +
    "\004\012\166\001\002\000\004\012\126\001\002\000\054" +
    "\004\005\005\022\012\013\021\004\022\015\023\010\024" +
    "\024\025\027\026\011\027\012\030\025\031\007\032\023" +
    "\033\021\034\020\046\026\047\016\050\033\051\030\052" +
    "\031\053\042\001\002\000\004\012\116\001\002\000\004" +
    "\012\113\001\002\000\004\012\104\001\002\000\026\002" +
    "\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\013\uffd4\014\uffd4" +
    "\016\uffd4\020\ufff9\035\uffd4\001\002\000\004\012\074\001" +
    "\002\000\024\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\013\uffd6\014\uffd6\016\uffd6\035\uffd6\001\002\000\026\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\070\035\uffd0\001\002\000\004\035\ufffe\001" +
    "\002\000\024\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\013\uffd7\014\uffd7\016\uffd7\035\uffd7\001\002\000\022\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\014\uffd2\020\037" +
    "\036\040\001\002\000\004\002\036\001\002\000\004\002" +
    "\001\001\002\000\054\004\005\005\022\012\013\021\004" +
    "\022\015\023\010\024\024\025\027\026\011\027\012\030" +
    "\025\031\007\032\023\033\021\034\020\046\026\047\016" +
    "\050\033\051\030\052\031\053\042\001\002\000\054\004" +
    "\005\005\022\012\013\021\004\022\015\023\010\024\024" +
    "\025\027\026\011\027\012\030\025\031\007\032\023\033" +
    "\021\034\020\046\026\047\016\050\033\051\030\052\031" +
    "\053\042\001\002\000\016\004\043\005\044\006\047\007" +
    "\045\014\046\035\ufffc\001\002\000\026\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\013\uffd2\014\uffd2\016\uffd2\020" +
    "\037\035\uffd2\001\002\000\054\004\005\005\022\012\013" +
    "\021\004\022\015\023\010\024\024\025\027\026\011\027" +
    "\012\030\025\031\007\032\023\033\021\034\020\046\026" +
    "\047\016\050\033\051\030\052\031\053\042\001\002\000" +
    "\054\004\005\005\022\012\013\021\004\022\015\023\010" +
    "\024\024\025\027\026\011\027\012\030\025\031\007\032" +
    "\023\033\021\034\020\046\026\047\016\050\033\051\030" +
    "\052\031\053\042\001\002\000\054\004\005\005\022\012" +
    "\013\021\004\022\015\023\010\024\024\025\027\026\011" +
    "\027\012\030\025\031\007\032\023\033\021\034\020\046" +
    "\026\047\016\050\033\051\030\052\031\053\042\001\002" +
    "\000\010\043\053\044\052\046\051\001\002\000\054\004" +
    "\005\005\022\012\013\021\004\022\015\023\010\024\024" +
    "\025\027\026\011\027\012\030\025\031\007\032\023\033" +
    "\021\034\020\046\026\047\016\050\033\051\030\052\031" +
    "\053\042\001\002\000\024\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\045\013\ufff3\014\046\016\ufff3\035\ufff3\001\002" +
    "\000\006\015\057\016\056\001\002\000\004\015\055\001" +
    "\002\000\004\015\054\001\002\000\024\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7\016\uffe7\035" +
    "\uffe7\001\002\000\024\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\014\uffe6\016\uffe6\035\uffe6\001\002\000" +
    "\004\046\060\001\002\000\024\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\013\uffe3\014\uffe3\016\uffe3\035\uffe3\001" +
    "\002\000\004\016\061\001\002\000\004\046\062\001\002" +
    "\000\004\015\063\001\002\000\024\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\013\uffe4\014\uffe4\016\uffe4\035\uffe4" +
    "\001\002\000\024\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\013\ufff2\014\046\016\ufff2\035\ufff2\001\002\000\024" +
    "\002\ufff4\004\ufff4\005\ufff4\006\047\007\045\013\ufff4\014" +
    "\046\016\ufff4\035\ufff4\001\002\000\024\002\ufff5\004\ufff5" +
    "\005\ufff5\006\047\007\045\013\ufff5\014\046\016\ufff5\035" +
    "\ufff5\001\002\000\024\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\013\uffec\014\046\016\uffec\035\uffec\001\002\000" +
    "\006\046\071\047\073\001\002\000\024\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\013\ufff9\014\ufff9\016\ufff9\035" +
    "\ufff9\001\002\000\024\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\013\uffd1\014\uffd1\016\uffd1\035\uffd1\001\002\000" +
    "\024\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\013\ufff8" +
    "\014\ufff8\016\ufff8\035\ufff8\001\002\000\054\004\005\005" +
    "\022\012\013\021\004\022\015\023\010\024\024\025\027" +
    "\026\011\027\012\030\025\031\007\032\023\033\021\034" +
    "\020\046\026\047\016\050\033\051\030\052\031\053\042" +
    "\001\002\000\020\004\043\005\044\006\047\007\045\013" +
    "\ufff7\014\046\016\ufff7\001\002\000\006\013\100\016\077" +
    "\001\002\000\054\004\005\005\022\012\013\021\004\022" +
    "\015\023\010\024\024\025\027\026\011\027\012\030\025" +
    "\031\007\032\023\033\021\034\020\046\026\047\016\050" +
    "\033\051\030\052\031\053\042\001\002\000\024\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\013\uffee\014\uffee\016" +
    "\uffee\035\uffee\001\002\000\020\004\043\005\044\006\047" +
    "\007\045\013\ufff6\014\046\016\ufff6\001\002\000\054\004" +
    "\005\005\022\012\013\021\004\022\015\023\010\024\024" +
    "\025\027\026\011\027\012\030\025\031\007\032\023\033" +
    "\021\034\020\046\026\047\016\050\033\051\030\052\031" +
    "\053\042\001\002\000\024\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\013\uffed\014\046\016\uffed\035\uffed\001\002" +
    "\000\054\004\005\005\022\012\013\021\004\022\015\023" +
    "\010\024\024\025\027\026\011\027\012\030\025\031\007" +
    "\032\023\033\021\034\020\046\026\047\016\050\033\051" +
    "\030\052\031\053\042\001\002\000\016\004\043\005\044" +
    "\006\047\007\045\014\046\016\106\001\002\000\054\004" +
    "\005\005\022\012\013\021\004\022\015\023\010\024\024" +
    "\025\027\026\011\027\012\030\025\031\007\032\023\033" +
    "\021\034\020\046\026\047\016\050\033\051\030\052\031" +
    "\053\042\001\002\000\016\004\043\005\044\006\047\007" +
    "\045\014\046\016\110\001\002\000\004\046\111\001\002" +
    "\000\004\013\112\001\002\000\024\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\013\uffe1\014\uffe1\016\uffe1\035\uffe1" +
    "\001\002\000\054\004\005\005\022\012\013\021\004\022" +
    "\015\023\010\024\024\025\027\026\011\027\012\030\025" +
    "\031\007\032\023\033\021\034\020\046\026\047\016\050" +
    "\033\051\030\052\031\053\042\001\002\000\006\013\115" +
    "\016\077\001\002\000\024\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\013\uffef\014\uffef\016\uffef\035\uffef\001\002" +
    "\000\054\004\005\005\022\012\013\021\004\022\015\023" +
    "\010\024\024\025\027\026\011\027\012\030\025\031\007" +
    "\032\023\033\021\034\020\046\026\047\016\050\033\051" +
    "\030\052\031\053\042\001\002\000\016\004\043\005\044" +
    "\006\047\007\045\014\046\016\120\001\002\000\004\045" +
    "\121\001\002\000\004\016\122\001\002\000\054\004\005" +
    "\005\022\012\013\021\004\022\015\023\010\024\024\025" +
    "\027\026\011\027\012\030\025\031\007\032\023\033\021" +
    "\034\020\046\026\047\016\050\033\051\030\052\031\053" +
    "\042\001\002\000\016\004\043\005\044\006\047\007\045" +
    "\013\124\014\046\001\002\000\024\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf\016\uffdf\035\uffdf" +
    "\001\002\000\024\002\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\013\uffda\014\046\016\uffda\035\uffda\001\002\000\054" +
    "\004\005\005\022\012\013\021\004\022\015\023\010\024" +
    "\024\025\027\026\011\027\012\030\025\031\007\032\023" +
    "\033\021\034\020\046\026\047\016\050\033\051\030\052" +
    "\031\053\042\001\002\000\016\004\043\005\044\006\047" +
    "\007\045\014\046\016\130\001\002\000\060\004\005\005" +
    "\022\012\013\021\004\022\015\023\010\024\024\025\027" +
    "\026\011\027\012\030\025\031\007\032\023\033\021\034" +
    "\020\037\131\040\133\046\026\047\016\050\033\051\030" +
    "\052\031\053\042\001\002\000\006\046\ufffb\047\ufffb\001" +
    "\002\000\016\004\043\005\044\006\047\007\045\014\046" +
    "\016\152\001\002\000\006\046\ufffa\047\ufffa\001\002\000" +
    "\006\046\071\047\073\001\002\000\004\016\136\001\002" +
    "\000\054\004\005\005\022\012\013\021\004\022\015\023" +
    "\010\024\024\025\027\026\011\027\012\030\025\031\007" +
    "\032\023\033\021\034\020\046\026\047\016\050\033\051" +
    "\030\052\031\053\042\001\002\000\016\004\043\005\044" +
    "\006\047\007\045\014\046\016\140\001\002\000\060\004" +
    "\005\005\022\012\013\021\004\022\015\023\010\024\024" +
    "\025\027\026\011\027\012\030\025\031\007\032\023\033" +
    "\021\034\020\037\131\040\133\046\026\047\016\050\033" +
    "\051\030\052\031\053\042\001\002\000\016\004\043\005" +
    "\044\006\047\007\045\013\151\014\046\001\002\000\006" +
    "\046\071\047\073\001\002\000\004\016\144\001\002\000" +
    "\054\004\005\005\022\012\013\021\004\022\015\023\010" +
    "\024\024\025\027\026\011\027\012\030\025\031\007\032" +
    "\023\033\021\034\020\046\026\047\016\050\033\051\030" +
    "\052\031\053\042\001\002\000\016\004\043\005\044\006" +
    "\047\007\045\014\046\016\146\001\002\000\054\004\005" +
    "\005\022\012\013\021\004\022\015\023\010\024\024\025" +
    "\027\026\011\027\012\030\025\031\007\032\023\033\021" +
    "\034\020\046\026\047\016\050\033\051\030\052\031\053" +
    "\042\001\002\000\016\004\043\005\044\006\047\007\045" +
    "\013\150\014\046\001\002\000\024\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\013\uffdb\014\uffdb\016\uffdb\035\uffdb" +
    "\001\002\000\024\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\013\uffdc\014\uffdc\016\uffdc\035\uffdc\001\002\000\006" +
    "\037\131\040\133\001\002\000\006\046\071\047\073\001" +
    "\002\000\004\016\155\001\002\000\054\004\005\005\022" +
    "\012\013\021\004\022\015\023\010\024\024\025\027\026" +
    "\011\027\012\030\025\031\007\032\023\033\021\034\020" +
    "\046\026\047\016\050\033\051\030\052\031\053\042\001" +
    "\002\000\020\004\043\005\044\006\047\007\045\013\160" +
    "\014\046\016\157\001\002\000\006\037\131\040\133\001" +
    "\002\000\024\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\013\uffde\014\uffde\016\uffde\035\uffde\001\002\000\006\046" +
    "\071\047\073\001\002\000\004\016\163\001\002\000\054" +
    "\004\005\005\022\012\013\021\004\022\015\023\010\024" +
    "\024\025\027\026\011\027\012\030\025\031\007\032\023" +
    "\033\021\034\020\046\026\047\016\050\033\051\030\052" +
    "\031\053\042\001\002\000\016\004\043\005\044\006\047" +
    "\007\045\013\165\014\046\001\002\000\024\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd\014\uffdd\016\uffdd" +
    "\035\uffdd\001\002\000\054\004\005\005\022\012\013\021" +
    "\004\022\015\023\010\024\024\025\027\026\011\027\012" +
    "\030\025\031\007\032\023\033\021\034\020\046\026\047" +
    "\016\050\033\051\030\052\031\053\042\001\002\000\016" +
    "\004\043\005\044\006\047\007\045\014\046\016\170\001" +
    "\002\000\054\004\005\005\022\012\013\021\004\022\015" +
    "\023\010\024\024\025\027\026\011\027\012\030\025\031" +
    "\007\032\023\033\021\034\020\046\026\047\016\050\033" +
    "\051\030\052\031\053\042\001\002\000\016\004\043\005" +
    "\044\006\047\007\045\014\046\016\172\001\002\000\006" +
    "\046\071\047\073\001\002\000\004\016\174\001\002\000" +
    "\054\004\005\005\022\012\013\021\004\022\015\023\010" +
    "\024\024\025\027\026\011\027\012\030\025\031\007\032" +
    "\023\033\021\034\020\046\026\047\016\050\033\051\030" +
    "\052\031\053\042\001\002\000\016\004\043\005\044\006" +
    "\047\007\045\013\176\014\046\001\002\000\024\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\035\uffe2\001\002\000\054\004\005\005\022\012\013" +
    "\021\004\022\015\023\010\024\024\025\027\026\011\027" +
    "\012\030\025\031\007\032\023\033\021\034\020\046\026" +
    "\047\016\050\033\051\030\052\031\053\042\001\002\000" +
    "\024\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\013\uffeb" +
    "\014\046\016\uffeb\035\uffeb\001\002\000\054\004\005\005" +
    "\022\012\013\021\004\022\015\023\010\024\024\025\027" +
    "\026\011\027\012\030\025\031\007\032\023\033\021\034" +
    "\020\046\026\047\016\050\033\051\030\052\031\053\042" +
    "\001\002\000\006\013\203\016\077\001\002\000\024\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1" +
    "\016\ufff1\035\ufff1\001\002\000\054\004\005\005\022\012" +
    "\013\021\004\022\015\023\010\024\024\025\027\026\011" +
    "\027\012\030\025\031\007\032\023\033\021\034\020\046" +
    "\026\047\016\050\033\051\030\052\031\053\034\001\002" +
    "\000\016\002\uffff\004\043\005\044\006\047\007\045\014" +
    "\046\001\002\000\004\035\ufffd\001\002\000\016\004\043" +
    "\005\044\006\047\007\045\013\210\014\046\001\002\000" +
    "\024\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\013\uffd8" +
    "\014\uffd8\016\uffd8\035\uffd8\001\002\000\054\004\005\005" +
    "\022\012\013\021\004\022\015\023\010\024\024\025\027" +
    "\026\011\027\012\030\025\031\007\032\023\033\021\034" +
    "\020\046\026\047\016\050\033\051\030\052\031\053\042" +
    "\001\002\000\016\004\043\005\044\006\047\007\045\014" +
    "\046\016\213\001\002\000\004\046\214\001\002\000\004" +
    "\016\215\001\002\000\004\046\216\001\002\000\004\016" +
    "\217\001\002\000\004\046\220\001\002\000\004\013\221" +
    "\001\002\000\024\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\013\uffe5\014\uffe5\016\uffe5\035\uffe5\001\002\000\054" +
    "\004\005\005\022\012\013\021\004\022\015\023\010\024" +
    "\024\025\027\026\011\027\012\030\025\031\007\032\023" +
    "\033\021\034\020\046\026\047\016\050\033\051\030\052" +
    "\031\053\042\001\002\000\016\004\043\005\044\006\047" +
    "\007\045\014\046\016\224\001\002\000\006\005\226\046" +
    "\225\001\002\000\004\013\231\001\002\000\004\046\227" +
    "\001\002\000\004\013\230\001\002\000\024\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\035\uffe8\001\002\000\024\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\013\uffe9\014\uffe9\016\uffe9\035\uffe9\001\002" +
    "\000\054\004\005\005\022\012\013\021\004\022\015\023" +
    "\010\024\024\025\027\026\011\027\012\030\025\031\007" +
    "\032\023\033\021\034\020\046\026\047\016\050\033\051" +
    "\030\052\031\053\042\001\002\000\006\013\234\016\077" +
    "\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\035\ufff0\001\002\000\054" +
    "\004\005\005\022\012\013\021\004\022\015\023\010\024" +
    "\024\025\027\026\011\027\012\030\025\031\007\032\023" +
    "\033\021\034\020\046\026\047\016\050\033\051\030\052" +
    "\031\053\042\001\002\000\016\004\043\005\044\006\047" +
    "\007\045\014\046\016\237\001\002\000\006\046\071\047" +
    "\073\001\002\000\004\016\241\001\002\000\006\046\071" +
    "\047\073\001\002\000\004\016\243\001\002\000\006\046" +
    "\071\047\073\001\002\000\004\016\245\001\002\000\006" +
    "\046\071\047\073\001\002\000\004\016\247\001\002\000" +
    "\006\046\071\047\073\001\002\000\004\016\251\001\002" +
    "\000\006\046\071\047\073\001\002\000\004\016\253\001" +
    "\002\000\006\046\071\047\073\001\002\000\004\016\255" +
    "\001\002\000\006\046\071\047\073\001\002\000\004\013" +
    "\257\001\002\000\024\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\013\uffe0\014\uffe0\016\uffe0\035\uffe0\001\002\000" +
    "\024\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\013\uffd9" +
    "\014\046\016\uffd9\035\uffd9\001\002\000\054\004\005\005" +
    "\022\012\013\021\004\022\015\023\010\024\024\025\027" +
    "\026\011\027\012\030\025\031\007\032\023\033\021\034" +
    "\020\046\026\047\016\050\033\051\030\052\031\053\042" +
    "\001\002\000\024\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\013\uffea\014\046\016\uffea\035\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\014\002\034\003\005\004\031\005\013\007" +
    "\016\001\001\000\002\001\001\000\006\003\257\007\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\206" +
    "\007\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\124\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\066\007\016\001" +
    "\001\000\006\003\040\007\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\065\007\016\001\001\000" +
    "\006\003\064\007\016\001\001\000\006\003\063\007\016" +
    "\001\001\000\002\001\001\000\006\003\047\007\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\074\006\075\007\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\100\007\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\102\007\016\001\001\000\002\001\001\000" +
    "\006\003\104\007\016\001\001\000\002\001\001\000\006" +
    "\003\106\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\074" +
    "\006\113\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\116\007\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\122\007" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\126\007\016\001\001\000\002\001" +
    "\001\000\010\003\131\007\016\010\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\134\001\001\000\002\001\001\000\006\003\136\007\016" +
    "\001\001\000\002\001\001\000\010\003\140\007\016\010" +
    "\141\001\001\000\002\001\001\000\004\007\142\001\001" +
    "\000\002\001\001\000\006\003\144\007\016\001\001\000" +
    "\002\001\001\000\006\003\146\007\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\152\001\001\000\004\007\153\001\001\000\002\001\001" +
    "\000\006\003\155\007\016\001\001\000\002\001\001\000" +
    "\004\010\160\001\001\000\002\001\001\000\004\007\161" +
    "\001\001\000\002\001\001\000\006\003\163\007\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\166" +
    "\007\016\001\001\000\002\001\001\000\006\003\170\007" +
    "\016\001\001\000\002\001\001\000\004\007\172\001\001" +
    "\000\002\001\001\000\006\003\174\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\177\007\016" +
    "\001\001\000\002\001\001\000\010\003\074\006\201\007" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\204\004\205\007\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\211\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\222\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\074" +
    "\006\232\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\235\007\016\001\001\000\002\001\001" +
    "\000\004\007\237\001\001\000\002\001\001\000\004\007" +
    "\241\001\001\000\002\001\001\000\004\007\243\001\001" +
    "\000\002\001\001\000\004\007\245\001\001\000\002\001" +
    "\001\000\004\007\247\001\001\000\002\001\001\000\004" +
    "\007\251\001\001\000\002\001\001\000\004\007\253\001" +
    "\001\000\002\001\001\000\004\007\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\261\007\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Constructor, needed for call to scan later
    private Lexer s;
   public Parser(Lexer s){super(s,s.symbolFactory); this.s=s; }
    
    private SeriesParserData seriesParserData;
    public SeriesParserData getSeriesParserData() { return seriesParserData; }
    public void setSeriesParserData(SeriesParserData seriesParserData) { this.seriesParserData = seriesParserData; }
    
    private SeriesParser seriesParser;
    public SeriesParser getSeriesParser() { return seriesParser; }
    public void setSeriesParser(SeriesParser seriesParser) { this.seriesParser = seriesParser; }
    
    // Error capturing
    public List<Symbol> errors = new LinkedList<>();
	public void syntax_error(Symbol s){	errors.add(s); }
	
	private Map<String, ASTNode> userVariables = new HashMap<>();
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= full_expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // full_expr ::= expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =e;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // full_expr ::= stmt_list SEMICOLON expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =e;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list SEMICOLON stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= VAR EQUALS expr 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 userVariables.put(n,e);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LTOPS ::= LT 
            {
              ComparisonOperators RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComparisonOperators n = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTOPS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LTOPS ::= LTE 
            {
              ComparisonOperators RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComparisonOperators n = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTOPS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NUMBER ::= INTEGER 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NUMBER ::= FLOAT 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arg_list ::= expr 
            {
              List<ASTNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Lists.newArrayList(e);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arg_list ::= arg_list COMMA expr 
            {
              List<ASTNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ASTNode> l = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(e);  RESULT =l;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr PLUS expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, Operator.PLUS, rhs);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr MINUS expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs,Operator.MINUS, rhs);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr TIMES expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs,  Operator.TIMES, rhs);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr DIVIDE expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, Operator.DIVIDE, rhs);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= CAP LPAREN arg_list RPAREN 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> l = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(l, FunctionType.CAP);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= FLOOR LPAREN arg_list RPAREN 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> l = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(l, FunctionType.FLOOR);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= MIN LPAREN arg_list RPAREN 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> l = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(l, FunctionType.MIN);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= MAX LPAREN arg_list RPAREN 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> l = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(l, FunctionType.MAX);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= INTEGER PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer lhs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new ConstantASTNode(lhs), Operator.PERCENT, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= VAR PERCENT expr 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(userVariables.get(v), Operator.PERCENT, rhs);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NUMBER PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Number lhs = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new ConstantASTNode(lhs), Operator.PERCENT, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= QUESTION PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lhs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new BreakEvenASTNode(), Operator.PERCENT, rhs);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= SHIFT LPAREN expr COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, i1, ShiftFunctionASTNode.InputMode.FUNCTION);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= SHIFT LPAREN expr COMMA MINUS INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, -i1, ShiftFunctionASTNode.InputMode.FUNCTION);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LBRACKET M RBRACKET 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, -i1, ShiftFunctionASTNode.InputMode.NOTATION);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr LBRACKET MONTH RBRACKET 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Month m1 = (Month)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MonthFunctionASTNode(e1, m1);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= DATEDAVG LPAREN expr COMMA INTEGER COMMA INTEGER COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, n1, n2, n3, DatedAvgFunctionASTNode.InputMode.FUNCTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr LBRACKET INTEGER COMMA INTEGER COMMA INTEGER RBRACKET 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, n1, n2, n3, DatedAvgFunctionASTNode.InputMode.NOTATION_WITH_COMMA);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LBRACKET INTEGER RBRACKET 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, a1, DatedAvgFunctionASTNode.InputMode.NOTATION_WITHOUT_COMMA);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= TIERBLEND LPAREN expr COMMA expr COMMA NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode low = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number n1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode high = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new TierBlendASTNode(target, low, n1, high);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= SPLITMONTH LPAREN expr COMMA expr COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SplitMonthFunctionASTNode(e1, e2, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= S LPAREN expr COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER RPAREN 
            {
              ASTNode RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		ASTNode base = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int lowerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int lowerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Number lower = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int higherleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int higherright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Number higher = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Number a1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Number b1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Number a2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number b2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number a3 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int b3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Number b3 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SCurveFunctionASTNode(base, lower, higher, a1,b1,a2,b2,a3,b3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= UNTIL LPAREN expr COMMA DATE COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UntilASTNode(lhs, date, rhs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= TIER LPAREN expr COMMA expr COMMA LTOPS NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lowValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lowValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode lowValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lowOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lowOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComparisonOperators lowOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number low = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode highValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Tier2FunctionASTNode(target, lowOp, low, lowValue, highValue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= TIER LPAREN expr COMMA expr COMMA LTOPS NUMBER COMMA expr COMMA LTOPS NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int lowValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int lowValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ASTNode lowValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int lowOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int lowOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ComparisonOperators lowOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Number low = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int midValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int midValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode midValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int midOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int midOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComparisonOperators midOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int midleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int midright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number mid = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode highValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Tier3FunctionASTNode(target, lowOp, low, lowValue, midOp, mid, midValue, highValue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= TIER LPAREN expr COMMA LTOPS NUMBER COMMA expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lowOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lowOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComparisonOperators lowOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number low = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lowValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lowValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode lowValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode highValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Tier2FunctionASTNode(target, lowOp, low, lowValue, highValue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= TIER LPAREN expr COMMA LTOPS NUMBER COMMA expr COMMA LTOPS NUMBER COMMA expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		ASTNode target = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int lowOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int lowOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ComparisonOperators lowOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Number low = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int lowValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lowValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode lowValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int midOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int midOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComparisonOperators midOp = (ComparisonOperators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int midleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int midright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number mid = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int midValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int midValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode midValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode highValue = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Tier3FunctionASTNode(target, lowOp, low, lowValue, midOp, mid, midValue, highValue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= MINUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusASTNode(e);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= PLUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LPAREN expr RPAREN 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= SERIES 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= NAMED_ELEMENT 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = seriesParser.getNamedSeriesASTNode(n);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= FLOAT 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantASTNode(n);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= INTEGER 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantASTNode(n);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= QUESTION 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BreakEvenASTNode();                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= VAR 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = userVariables.get(v);                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= PARAM COLON NUMBER 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Number v = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ParamASTNode(n, v);         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= PARAM 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ParamASTNode(n);         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
