
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mmxlabs.common.parser.impl;

import java_cup.runtime.*;
import java.util.*;
import com.mmxlabs.common.parser.astnodes.*;
import com.mmxlabs.common.parser.series.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\010\000\002\002\010\000" +
    "\002\002\010\000\002\002\010\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\010\000\002\002" +
    "\011\000\002\002\014\000\002\002\012\000\002\002\012" +
    "\000\002\002\012\000\002\002\026\000\002\002\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\046\004\005\005\020\012\014\016\004\017" +
    "\015\020\013\021\022\022\025\023\011\024\012\025\023" +
    "\026\007\027\021\030\010\031\024\032\016\033\027\034" +
    "\026\001\002\000\022\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\013\uffe5\014\uffe5\015\170\001\002\000\046\004" +
    "\005\005\020\012\014\016\004\017\015\020\013\021\022" +
    "\022\025\023\011\024\012\025\023\026\007\027\021\030" +
    "\010\031\024\032\016\033\027\034\026\001\002\000\014" +
    "\002\166\004\033\005\034\006\036\007\035\001\002\000" +
    "\004\012\143\001\002\000\004\012\134\001\002\000\004" +
    "\012\124\001\002\000\004\012\113\001\002\000\004\012" +
    "\106\001\002\000\046\004\005\005\020\012\014\016\004" +
    "\017\015\020\013\021\022\022\025\023\011\024\012\025" +
    "\023\026\007\027\021\030\010\031\024\032\016\033\027" +
    "\034\026\001\002\000\004\012\077\001\002\000\022\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7" +
    "\015\uffff\001\002\000\004\015\075\001\002\000\046\004" +
    "\005\005\020\012\014\016\004\017\015\020\013\021\022" +
    "\022\025\023\011\024\012\025\023\026\007\027\021\030" +
    "\010\031\024\032\016\033\027\034\026\001\002\000\004" +
    "\012\063\001\002\000\004\012\056\001\002\000\004\012" +
    "\047\001\002\000\022\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\014\uffe6\015\000\001\002\000\004\012" +
    "\030\001\002\000\020\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\013\uffe8\014\uffe8\001\002\000\020\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\013\uffe9\014\uffe9\001\002" +
    "\000\046\004\005\005\020\012\014\016\004\017\015\020" +
    "\013\021\022\022\025\023\011\024\012\025\023\026\007" +
    "\027\021\030\010\031\024\032\016\033\027\034\026\001" +
    "\002\000\014\004\033\005\034\006\036\007\035\014\032" +
    "\001\002\000\046\004\005\005\020\012\014\016\004\017" +
    "\015\020\013\021\022\022\025\023\011\024\012\025\023" +
    "\026\007\027\021\030\010\031\024\032\016\033\027\034" +
    "\026\001\002\000\046\004\005\005\020\012\014\016\004" +
    "\017\015\020\013\021\022\022\025\023\011\024\012\025" +
    "\023\026\007\027\021\030\010\031\024\032\016\033\027" +
    "\034\026\001\002\000\046\004\005\005\020\012\014\016" +
    "\004\017\015\020\013\021\022\022\025\023\011\024\012" +
    "\025\023\026\007\027\021\030\010\031\024\032\016\033" +
    "\027\034\026\001\002\000\046\004\005\005\020\012\014" +
    "\016\004\017\015\020\013\021\022\022\025\023\011\024" +
    "\012\025\023\026\007\027\021\030\010\031\024\032\016" +
    "\033\027\034\026\001\002\000\046\004\005\005\020\012" +
    "\014\016\004\017\015\020\013\021\022\022\025\023\011" +
    "\024\012\025\023\026\007\027\021\030\010\031\024\032" +
    "\016\033\027\034\026\001\002\000\020\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\035\013\ufffc\014\ufffc\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb" +
    "\014\ufffb\001\002\000\020\002\ufffd\004\ufffd\005\ufffd\006" +
    "\036\007\035\013\ufffd\014\ufffd\001\002\000\020\002\ufffe" +
    "\004\ufffe\005\ufffe\006\036\007\035\013\ufffe\014\ufffe\001" +
    "\002\000\014\004\033\005\034\006\036\007\035\013\044" +
    "\001\002\000\020\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\013\ufff7\014\ufff7\001\002\000\046\004\005\005\020" +
    "\012\014\016\004\017\015\020\013\021\022\022\025\023" +
    "\011\024\012\025\023\026\007\027\021\030\010\031\024" +
    "\032\016\033\027\034\026\001\002\000\020\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\013\ufff6\014\ufff6\001\002" +
    "\000\046\004\005\005\020\012\014\016\004\017\015\020" +
    "\013\021\022\022\025\023\011\024\012\025\023\026\007" +
    "\027\021\030\010\031\024\032\016\033\027\034\026\001" +
    "\002\000\014\004\033\005\034\006\036\007\035\014\051" +
    "\001\002\000\046\004\005\005\020\012\014\016\004\017" +
    "\015\020\013\021\022\022\025\023\011\024\012\025\023" +
    "\026\007\027\021\030\010\031\024\032\016\033\027\034" +
    "\026\001\002\000\014\004\033\005\034\006\036\007\035" +
    "\014\053\001\002\000\004\031\054\001\002\000\004\013" +
    "\055\001\002\000\020\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\013\uffee\014\uffee\001\002\000\046\004\005\005" +
    "\020\012\014\016\004\017\015\020\013\021\022\022\025" +
    "\023\011\024\012\025\023\026\007\027\021\030\010\031" +
    "\024\032\016\033\027\034\026\001\002\000\014\004\033" +
    "\005\034\006\036\007\035\014\060\001\002\000\046\004" +
    "\005\005\020\012\014\016\004\017\015\020\013\021\022" +
    "\022\025\023\011\024\012\025\023\026\007\027\021\030" +
    "\010\031\024\032\016\033\027\034\026\001\002\000\014" +
    "\004\033\005\034\006\036\007\035\013\062\001\002\000" +
    "\020\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\013\ufff8" +
    "\014\ufff8\001\002\000\046\004\005\005\020\012\014\016" +
    "\004\017\015\020\013\021\022\022\025\023\011\024\012" +
    "\025\023\026\007\027\021\030\010\031\024\032\016\033" +
    "\027\034\026\001\002\000\014\004\033\005\034\006\036" +
    "\007\035\014\065\001\002\000\006\031\066\032\070\001" +
    "\002\000\006\013\000\014\000\001\002\000\004\014\071" +
    "\001\002\000\006\013\uffff\014\uffff\001\002\000\046\004" +
    "\005\005\020\012\014\016\004\017\015\020\013\021\022" +
    "\022\025\023\011\024\012\025\023\026\007\027\021\030" +
    "\010\031\024\032\016\033\027\034\026\001\002\000\014" +
    "\004\033\005\034\006\036\007\035\013\073\001\002\000" +
    "\020\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\013\ufff0" +
    "\014\ufff0\001\002\000\020\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\013\uffec\014\uffec\001\002\000\046\004\005" +
    "\005\020\012\014\016\004\017\015\020\013\021\022\022" +
    "\025\023\011\024\012\025\023\026\007\027\021\030\010" +
    "\031\024\032\016\033\027\034\026\001\002\000\020\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\013\ufff5\014\ufff5" +
    "\001\002\000\046\004\005\005\020\012\014\016\004\017" +
    "\015\020\013\021\022\022\025\023\011\024\012\025\023" +
    "\026\007\027\021\030\010\031\024\032\016\033\027\034" +
    "\026\001\002\000\014\004\033\005\034\006\036\007\035" +
    "\014\101\001\002\000\046\004\005\005\020\012\014\016" +
    "\004\017\015\020\013\021\022\022\025\023\011\024\012" +
    "\025\023\026\007\027\021\030\010\031\024\032\016\033" +
    "\027\034\026\001\002\000\014\004\033\005\034\006\036" +
    "\007\035\013\103\001\002\000\020\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\013\ufffa\014\ufffa\001\002\000\014" +
    "\004\033\005\034\006\036\007\035\013\105\001\002\000" +
    "\020\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\013\uffea" +
    "\014\uffea\001\002\000\046\004\005\005\020\012\014\016" +
    "\004\017\015\020\013\021\022\022\025\023\011\024\012" +
    "\025\023\026\007\027\021\030\010\031\024\032\016\033" +
    "\027\034\026\001\002\000\014\004\033\005\034\006\036" +
    "\007\035\014\110\001\002\000\046\004\005\005\020\012" +
    "\014\016\004\017\015\020\013\021\022\022\025\023\011" +
    "\024\012\025\023\026\007\027\021\030\010\031\024\032" +
    "\016\033\027\034\026\001\002\000\014\004\033\005\034" +
    "\006\036\007\035\013\112\001\002\000\020\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\013\ufff9\014\ufff9\001\002" +
    "\000\046\004\005\005\020\012\014\016\004\017\015\020" +
    "\013\021\022\022\025\023\011\024\012\025\023\026\007" +
    "\027\021\030\010\031\024\032\016\033\027\034\026\001" +
    "\002\000\014\004\033\005\034\006\036\007\035\014\115" +
    "\001\002\000\004\031\116\001\002\000\004\014\117\001" +
    "\002\000\004\031\120\001\002\000\004\014\121\001\002" +
    "\000\004\031\122\001\002\000\004\013\123\001\002\000" +
    "\020\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\013\ufff1" +
    "\014\ufff1\001\002\000\046\004\005\005\020\012\014\016" +
    "\004\017\015\020\013\021\022\022\025\023\011\024\012" +
    "\025\023\026\007\027\021\030\010\031\024\032\016\033" +
    "\027\034\026\001\002\000\014\004\033\005\034\006\036" +
    "\007\035\014\126\001\002\000\006\005\130\031\127\001" +
    "\002\000\004\013\133\001\002\000\004\031\131\001\002" +
    "\000\004\013\132\001\002\000\020\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\001\002\000\020" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\013\ufff3\014" +
    "\ufff3\001\002\000\046\004\005\005\020\012\014\016\004" +
    "\017\015\020\013\021\022\022\025\023\011\024\012\025" +
    "\023\026\007\027\021\030\010\031\024\032\016\033\027" +
    "\034\026\001\002\000\014\004\033\005\034\006\036\007" +
    "\035\014\136\001\002\000\006\031\066\032\070\001\002" +
    "\000\004\014\140\001\002\000\046\004\005\005\020\012" +
    "\014\016\004\017\015\020\013\021\022\022\025\023\011" +
    "\024\012\025\023\026\007\027\021\030\010\031\024\032" +
    "\016\033\027\034\026\001\002\000\014\004\033\005\034" +
    "\006\036\007\035\013\142\001\002\000\020\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\013\uffef\014\uffef\001\002" +
    "\000\046\004\005\005\020\012\014\016\004\017\015\020" +
    "\013\021\022\022\025\023\011\024\012\025\023\026\007" +
    "\027\021\030\010\031\024\032\016\033\027\034\026\001" +
    "\002\000\014\004\033\005\034\006\036\007\035\014\145" +
    "\001\002\000\006\031\066\032\070\001\002\000\004\014" +
    "\147\001\002\000\006\031\066\032\070\001\002\000\004" +
    "\014\151\001\002\000\006\031\066\032\070\001\002\000" +
    "\004\014\153\001\002\000\006\031\066\032\070\001\002" +
    "\000\004\014\155\001\002\000\006\031\066\032\070\001" +
    "\002\000\004\014\157\001\002\000\006\031\066\032\070" +
    "\001\002\000\004\014\161\001\002\000\006\031\066\032" +
    "\070\001\002\000\004\014\163\001\002\000\006\031\066" +
    "\032\070\001\002\000\004\013\165\001\002\000\020\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\013\uffed\014\uffed" +
    "\001\002\000\004\002\001\001\002\000\020\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\013\uffeb\014\uffeb\001\002" +
    "\000\046\004\005\005\020\012\014\016\004\017\015\020" +
    "\013\021\022\022\025\023\011\024\012\025\023\026\007" +
    "\027\021\030\010\031\024\032\016\033\027\034\026\001" +
    "\002\000\020\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\013\ufff4\014\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\002\005\003\016\001\001\000\002\001" +
    "\001\000\006\002\166\003\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\103\003\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\073\003\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\030\003\016\001\001\000\002\001\001\000\006\002" +
    "\042\003\016\001\001\000\006\002\041\003\016\001\001" +
    "\000\006\002\040\003\016\001\001\000\006\002\037\003" +
    "\016\001\001\000\006\002\036\003\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\045" +
    "\003\016\001\001\000\002\001\001\000\006\002\047\003" +
    "\016\001\001\000\002\001\001\000\006\002\051\003\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\056\003\016\001\001" +
    "\000\002\001\001\000\006\002\060\003\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\063\003\016" +
    "\001\001\000\002\001\001\000\004\003\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\071\003\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\075\003\016\001\001" +
    "\000\002\001\001\000\006\002\077\003\016\001\001\000" +
    "\002\001\001\000\006\002\101\003\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\106\003\016\001\001\000\002\001\001" +
    "\000\006\002\110\003\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\113\003\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\124\003\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\134\003\016\001\001\000\002\001\001" +
    "\000\004\003\136\001\001\000\002\001\001\000\006\002" +
    "\140\003\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\143\003\016\001\001\000\002\001\001\000" +
    "\004\003\145\001\001\000\002\001\001\000\004\003\147" +
    "\001\001\000\002\001\001\000\004\003\151\001\001\000" +
    "\002\001\001\000\004\003\153\001\001\000\002\001\001" +
    "\000\004\003\155\001\001\000\002\001\001\000\004\003" +
    "\157\001\001\000\002\001\001\000\004\003\161\001\001" +
    "\000\002\001\001\000\004\003\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\170\003\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Constructor, needed for call to scan later
    private Lexer s;
   public Parser(Lexer s){super(s,s.symbolFactory); this.s=s; }
    
    private SeriesParserData seriesParserData;
    public SeriesParserData getSeriesParserData() { return seriesParserData; }
    public void setSeriesParserData(SeriesParserData seriesParserData) { this.seriesParserData = seriesParserData; }
    
    private SeriesParser seriesParser;
    public SeriesParser getSeriesParser() { return seriesParser; }
    public void setSeriesParser(SeriesParser seriesParser) { this.seriesParser = seriesParser; }
    
    // Error capturing
    public List<Symbol> errors = new LinkedList<>();
	public void syntax_error(Symbol s){	errors.add(s); }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NUMBER ::= INTEGER 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NUMBER ::= FLOAT 
            {
              Number RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr PLUS expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, rhs, Operator.PLUS);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MINUS expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, rhs, Operator.MINUS);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr TIMES expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, rhs, Operator.TIMES);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr DIVIDE expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(lhs, rhs, Operator.DIVIDE);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= CAP LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.CAP);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= FLOOR LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.FLOOR);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= MIN LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.MIN);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= MAX LPAREN expr COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionASTNode(e1, e2, FunctionType.MAX);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= INTEGER PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer lhs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new ConstantASTNode(lhs), rhs, Operator.PERCENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= NUMBER PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Number lhs = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new ConstantASTNode(lhs), rhs, Operator.PERCENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= QUESTION PERCENT expr 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lhs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorASTNode(new BreakEvenASTNode(), rhs, Operator.PERCENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= SHIFT LPAREN expr COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, i1);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= SHIFT LPAREN expr COMMA MINUS INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ShiftFunctionASTNode(e1, -i1);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= DATEDAVG LPAREN expr COMMA INTEGER COMMA INTEGER COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode lhs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new DatedAvgFunctionASTNode(lhs, n1, n2, n3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= VOLUMETIERM3 LPAREN expr COMMA NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode low = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number n1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode high = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new VolumeTierASTNode(true, low, n1, high); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= VOLUMETIERMMBTU LPAREN expr COMMA NUMBER COMMA expr RPAREN 
            {
              ASTNode RESULT =null;
		int lowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode low = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number n1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode high = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new VolumeTierASTNode(false, low, n1, high); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= SPLITMONTH LPAREN expr COMMA expr COMMA INTEGER RPAREN 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SplitMonthFunctionASTNode(e1, e2, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= S LPAREN expr COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER RPAREN 
            {
              ASTNode RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		ASTNode base = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int lowerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int lowerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Number lower = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int higherleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int higherright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Number higher = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Number a1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Number b1 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Number a2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Number b2 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number a3 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int b3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Number b3 = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SCurveFunctionASTNode(base, lower, higher, a1,b1,a2,b2,a3,b3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MINUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusASTNode(e);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= PLUS expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= LPAREN expr RPAREN 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= SERIES 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NAMED_ELEMENT 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = seriesParser.getNamedSeriesASTNode(n);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= FLOAT 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ConstantASTNode(n);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= INTEGER 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ConstantASTNode(n);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= QUESTION 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new BreakEvenASTNode();           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
